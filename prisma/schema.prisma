// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(uuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    gigs          Gig[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    Invoice       Invoice[]
}

enum GigType {
    CONSULTING
    CONTRACT
    TEMPORARY
    FULL_TIME
}

model Gig {
    id          String      @id @default(uuid())
    title       String
    description String?
    userId      String
    startDate   DateTime?
    endDate     DateTime?
    isActive    Boolean     @default(true)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    type        GigType?
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    GigContact  GigContact?
    Invoice     Invoice[]
}

model GigContact {
    id         String   @id @default(uuid())
    email      String?
    phone      String?
    name       String?
    addressOne String?
    addressTwo String?
    city       String?
    state      String?
    zipCode    String?
    country    String?
    gigId      String   @unique
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    Gig        Gig      @relation(fields: [gigId], references: [id], onDelete: Cascade)
}

model Invoice {
    id             String           @id @default(uuid())
    title          String
    description    String?
    userId         String
    gigId          String
    amount         Float
    currency       String           @default("USD")
    sentAt         DateTime?
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    gig            Gig?             @relation(fields: [gigId], references: [id], onDelete: Cascade)
    InvoiceItem    InvoiceItem[]
    InvoiceExpense InvoiceExpense[]
}

model InvoiceItem {
    id        String   @id @default(uuid())
    invoiceId String   @unique
    title     String
    amount    Float
    rate      Float
    quantity  Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

model InvoiceExpense {
    id        String   @id @default(uuid())
    invoiceId String   @unique
    title     String
    amount    Float
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}
